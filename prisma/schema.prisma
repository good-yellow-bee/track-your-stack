// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// NextAuth.js Tables
// ============================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  portfolios    Portfolio[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================================
// Portfolio Management
// ============================================

model Portfolio {
  id            String              @id @default(cuid())
  userId        String
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  baseCurrency  String              @default("USD")
  investments   Investment[]
  snapshots     PortfolioSnapshot[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@unique([userId, name]) // Prevent duplicate portfolio names per user
  @@index([userId])
  @@index([userId, createdAt]) // For sorting user's portfolios by creation date
}

// ============================================
// Investment Tracking
// ============================================

enum AssetType {
  STOCK
  ETF
  MUTUAL_FUND
  CRYPTO
}

model Investment {
  id                   String                @id @default(cuid())
  portfolioId          String
  portfolio            Portfolio             @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  ticker               String
  assetName            String
  assetType            AssetType
  totalQuantity        Decimal               @db.Decimal(20, 8)
  averageCostBasis     Decimal               @db.Decimal(20, 8)
  purchaseCurrency     String
  currentPrice         Decimal?              @db.Decimal(20, 8)
  currentPriceCurrency String?
  priceUpdatedAt       DateTime?
  transactions         PurchaseTransaction[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  @@unique([portfolioId, ticker]) // Prevent duplicate tickers within a portfolio
  @@index([portfolioId])
  @@index([ticker])
  @@index([priceUpdatedAt])
  @@index([assetType]) // For filtering by asset type
}

model PurchaseTransaction {
  id           String     @id @default(cuid())
  investmentId String
  investment   Investment @relation(fields: [investmentId], references: [id], onDelete: Cascade)
  quantity     Decimal    @db.Decimal(20, 8)
  pricePerUnit Decimal    @db.Decimal(20, 8)
  currency     String
  purchaseDate DateTime   @db.Date
  notes        String?    @db.Text
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([investmentId])
  @@index([purchaseDate])
}

// ============================================
// Price Caching
// ============================================

model CurrencyRate {
  id           String   @id @default(cuid())
  fromCurrency String
  toCurrency   String
  rate         Decimal  @db.Decimal(20, 8)
  fetchedAt    DateTime
  createdAt    DateTime @default(now())

  @@unique([fromCurrency, toCurrency])
  @@index([fetchedAt])
}

// ============================================
// Phase 2: Historical Tracking
// ============================================

model PortfolioSnapshot {
  id           String    @id @default(cuid())
  portfolioId  String
  portfolio    Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  totalValue   Decimal   @db.Decimal(20, 2)
  baseCurrency String
  snapshotDate DateTime  @db.Date
  createdAt    DateTime  @default(now())

  @@unique([portfolioId, snapshotDate])
  @@index([portfolioId, snapshotDate])
}
